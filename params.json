{"name":"Django Gearman JBox","tagline":"","body":"django-gearman-jbox\r\n===================\r\n\r\n*django-gearman-jbox* is a convenience wrapper for the [Gearman][Gearman]\r\n[Python Bindings][python-gearman].\r\n\r\nWith django-gearman-jbox, you can code workers as well as clients in a Django project\r\nwith minimal overhead in your application. Server connections etc. all take\r\nplace in django-gearman-jbox and don't unnecessarily clog your application code.\r\n\r\nThis library is based in large part on Fred Wenzel's [django-gearman] and Jozef Ševčík's [django-gearman-commands].\r\n- [django-gearman][django-gearman] for the 'decorator way' to create workers (very cool)\r\n- [django-gearman-commands][django-gearman-commands] for the 'gearman_server_info' command (very nice)\r\n\r\nBut there are some modifications :\r\n\r\nWorkers are now launched individually, so you have to pass 2 mandatory parameters to start the worker :\r\n - the Django App name where workers reside with the `-a` parameter\r\n - the worker's name with `-n`\r\n\r\nThe `-q` parameter is still here and has the same function than in [django-gearman].\r\n\r\n- I removed the ability of lauching many wokers at once (`-w` parameter in [django-gearman]).\r\nI prefer having one process for each worker and Supervisord managing process. (screen is not an option)\r\n- I also added a signal handler to catch SIGTERM signals send by Supervisord and SIGINT when you worker is attached to the console.\r\nThis gives you the possibility of executing code just before the worker terminates.\r\n(See `django_gearman_jbox\\management\\commands\\gearman_worker.py`, line 116)\r\n\r\n[Gearman]: http://gearman.org\r\n[python-gearman]: http://github.com/samuel/python-gearman\r\n[django-gearman]: https://github.com/fwenzel/django-gearman\r\n[django-gearman-commands]: https://github.com/CodeScaleInc/django-gearman-commands\r\n\r\n\r\nInstallation\r\n------------\r\nIt's the same for both the client and worker instances of your django project :\r\n\r\n    $ pip install django-gearman-jbox\r\n\r\nAdd ``django_gearman_jbox`` to the `INSTALLED_APPS` section of `settings.py`.\r\n\r\nSpecify the following setting in your local settings.py file:\r\n\r\n    # One or more gearman servers\r\n    GEARMAN_CLIENT_SERVERS = ['127.0.0.1']\r\n    GEARMAN_WORKER_SERVERS = ['127.0.0.1']\r\n\r\nWorkers\r\n-------\r\n### Registering workers\r\nCreate a directory `gearman_workers` in any of your django apps, and define as many\r\nworkers as you like, one worker per file. Create an empty `__init__.py` so the directory will be\r\nloaded as a package.\r\n\r\nExample :\r\n\r\n    my_django_app\r\n      |_ models.py\r\n      |_ gearman_workers\r\n          |_ __init__.py\r\n          |_ worker_foo.py\r\n          |_ worker_bar.py\r\n\r\n\r\n### Registering tasks\r\nIn the worker file, you can define as many tasks as functions as you like.\r\nThe function must accept a single argument as passed by the caller and must\r\nreturn the result of the operation, if applicable. (Note : It must accept an argument, even if you don't use it).\r\n\r\nMark each of these functions as gearman tasks by decorating them with :\r\n\r\n    import django_gearman_jbox.decorators.gearman_task\r\n\r\n    @gearman_task()\r\n    def my_task_function(foo):\r\n      pass\r\n\r\n### Task naming\r\nThe tasks are given a default name of their import path, with the phrase\r\n`gearman_task` stripped out of them, for readability reasons. You can override\r\nthe task name by specifying `name` parameter of the decorator. Here's how :\r\n\r\n    import django_gearman_jbox.decorators.gearman_task\r\n\r\n    @gearman_task(name='my-task-name')\r\n    def my_task_function(foo):\r\n      pass\r\n\r\n### Task parameters\r\nThe gearman docs specify that the task function can accept only one parameter\r\n(usually refered to as the ``data`` parameter). Additionally, that parameter\r\nmay only be a string. Sometimes that may not be enough. What if you would like\r\nto pass an array or a dict? You would need to serialize and deserialize them.\r\nFortunately, django-gearman-jbox can take care of this, so that you can spend\r\nall of your time on coding the actual task.\r\n\r\n    @gearman_task(name='my-task-name')\r\n    def my_task_function(foo):\r\n      pass\r\n\r\n    client.submit_job('my-task-name', {'foo': 'becomes', 'this': 'dict'})\r\n    client.submit_job('my-task-name', Decimal(1.0))\r\n\r\n### Tasks with more than one parameter\r\n\r\nYou can pass as many arguments as you want, of whatever (serializable) type\r\nyou like. Here's an example job definition :\r\n\r\n    @gearman_task(name='my-task-name')\r\n    def my_task_function(one, two, three):\r\n      pass\r\n\r\nYou can execute this function in two different ways :\r\n\r\n    client.submit_job('my-task-name', one=1, two=2, three=3)\r\n    client.submit_job('my-task-name', args=[1, 2, 3])\r\n\r\nUnfortunately, executing it like this:\r\n\r\n    client.submit_job('my-task-name', 1, 2, 3)\r\n\r\nwould produce the error, because ``submit_job`` from Gearman's Python bindings\r\ncontains __a lot__ of arguments and it's much easier to specify them via\r\nkeyword names or a special ``args`` keyword than to type something like seven\r\n``None``s instead :\r\n\r\n    client.submit_job('my-task-name', None, None, None, None, None, None, None, 1, 2, 3)\r\n\r\nThe only limitation that you have are gearman reserved keyword parameters. As of\r\nGearman 2.0.2 these are :\r\n\r\n    * data\r\n    * unique\r\n    * priority\r\n    * background\r\n    * wait_until_complete\r\n    * max_retries\r\n    * poll_timeout\r\n\r\nSo, if you want your task definition to have, for example, ``unique`` or\r\n``background`` keyword parameters, you need to execute the task in a special,\r\nmore verbose way. Here's an example of such a task and its execution :\r\n\r\n    @gearman_task(name='my-task-name')\r\n    def my_task_function(background, unique):\r\n      pass\r\n\r\n    client.submit_job('my-task-name', kwargs={\"background\": True, \"unique\": False})\r\n    client.submit_job('my-task-name', args=[True, False])\r\n\r\nFinally:\r\n\r\n    client.submit_job('my-task-name', background=True, unique=True, kwargs={\"background\": False, \"unique\": False})\r\n\r\nDon't panic, your task is safe! That's because you're using ``kwargs``\r\ndirectly. Therefore, Gearman's bindings would receive ``True`` for\r\n``submit_job`` function, while your task would receive ``False``.\r\n\r\nAlways remember to double-check your parameter names with the reserved words\r\nlist.\r\n\r\n### Starting a worker\r\nTo start a worker, run `python manage.py gearman_worker -a <django_app_name> -n <worker_name>`. It will start\r\nserving all registered tasks for that worker.\r\n\r\nExample :\r\n\r\n    $ python manage.py gearman_worker -a django_app_name -n worker_foo\r\n    $ python manage.py gearman_worker -a django_app_name -n worker_bar\r\n\r\nTo spawn more than one worker see Supervisord configuration below.\r\n\r\n### Task queues\r\nQueues are a virtual abstraction layer built on top of gearman tasks. An\r\neasy way to describe it is the following example: Imagine you have a task\r\nfor fetching e-mails from the server, another task for sending the emails\r\nand one more task for sending SMS via an SMS gateway. A problem you may\r\nencounter is that the email fetching tasks may effectively \"block\" the worker\r\n(there could be so many of them, it could be so time-consuming, that no other\r\ntask would be able to pass through). Of course, one solution would be to add\r\nmore workers (via the Supervisord), but that would only temporarily\r\nsolve the problem. This is where queues come in.\r\n\r\nThe first thing to do is to pass a queue name into the job description, like\r\nthis :\r\n\r\n    @gearman_task(name=\"task_foo\", queue=\"foo\")\r\n    def function_foo(some_arg):\r\n      pass\r\n\r\n    @gearman_task(name=\"task_bar\", queue=\"bar\")\r\n    def function_bar(some_arg):\r\n      pass\r\n\r\n    @gearman_task(name=\"task_babar\", queue=\"bar\")\r\n    def function_babar(some_arg):\r\n      pass\r\n\r\nYou may then proceed to start the tasks that are bound to a specific\r\nqueue :\r\n\r\n    python manage.py gearman_worker -a <django_app_name> -n <worker_name> -q bar\r\n\r\nBe aware of the fact that if you don't specify the queue name, the worker\r\nwill load all tasks.\r\n\r\n### Start workers with Supervisord\r\nSupervisor - http://supervisord.org/ is babysitter for processes.\r\nIt allows you to launch, restart and monitor running processes. In our case it will be workers.\r\nTo do so, create one config file by worker and adjust the number of workers you want with the 'numprocs' parameter :\r\n\r\n`worker_foo.conf` :\r\n\r\n    [program:worker_foo]\r\n    command         = /path-to-your-virtualenv/bin/python /path-to-your-project/manage.py gearman_worker -a <django_app_name> -n %(program_name)s\r\n    process_name    = %(program_name)s_%(process_num)02d\r\n    numprocs        = 1\r\n    autostart       = true\r\n    autorestart     = true\r\n    user            = myapp\r\n    directory       = /home/myapp/\r\n    environment     = HOME='/home/myapp',USER='myapp',LOGNAME='myapp',\r\n\r\n`worker_bar.conf` :\r\n\r\n    [program:worker_bar]\r\n    command         = /path-to-your-virtualenv/bin/python /path-to-your-project/manage.py gearman_worker -a <django_app_name> -n %(program_name)s -q bar\r\n    process_name    = %(program_name)s_%(process_num)02d\r\n    numprocs        = 2\r\n    autostart       = true\r\n    autorestart     = true\r\n    user            = myapp\r\n    directory       = /home/myapp/\r\n    environment     = HOME='/home/myapp',USER='myapp',LOGNAME='myapp',\r\n\r\nYou can also create a `groups.conf` file with this content :\r\n\r\n    [group:foo]\r\n    programs=worker_foo, worker_foo2\r\n\r\n    [group:bar]\r\n    programs=worker_bar, worker_bar2\r\n\r\n\r\nThis will create process 'group' and allows you to reload all workers related to this group at once when you redeploy new code.\r\n\r\nOnce you're config files are created, do `/etc/init.d/supervisord start` to start Supervisord and `supervisorctl reload` if you modify config or\r\n\r\n    supervisorctl reread\r\n    supervisorctl update\r\n    supervisorctl restart foo:*\r\n    supervisorctl restart bar:*\r\n\r\n### Execute code when workers die\r\nWorkers catch SIGTERM and SIGINT signals to kill themselves with a `sys.exit(0)` in a callback function.\r\nAt this point in the code you can add your own function(s) which will be executed before the `sys.exit(0)`\r\nSee `django_gearman_jbox\\management\\commands\\gearman_worker.py`, line 116\r\n\r\nNote that this will impact all workers as it resides in the `gearman_worker.py` script which is global for all workers.\r\n\r\n\r\nClients\r\n-------\r\nTo make your workers work, you need a client app passing data to them.\r\nCreate and instance of the `django_gearman_jbox.GearmanClient` class and execute submit_job with it :\r\n\r\n    from django_gearman_jbox import GearmanClient\r\n\r\n    sentence = \"The quick brown fox jumps over the lazy dog.\"\r\n\r\n    client = GearmanClient()\r\n    res = client.submit_job(\"foo\", kwargs={\"sentence\": sentence})\r\n    print \"Result: '%s'\" % res\r\n\r\nDispatching a background event without waiting for the result is easy as well :\r\n\r\n    client.submit_job(\"foo\", background=True, kwargs={\"sentence\": sentence})\r\n\r\nGearman Server Infos\r\n-------------------\r\n\r\n`python manage.py gearman_server_info` outputs current status of Gearman servers.\r\nIf you installed Prettytable dependency, here is how output looks like :\r\n\r\n    $ python manage.py gearman_server_info\r\n    +---------------------+------------------------+\r\n    | Gearman Server Host | Gearman Server Version |\r\n    +---------------------+------------------------+\r\n    |    127.0.0.1:4730   |        OK 0.29         |\r\n    +---------------------+------------------------+.\r\n\r\n    +---------------+---------------+--------------+-------------+\r\n    |   Task Name   | Total Workers | Running Jobs | Queued Jobs |\r\n    +---------------+---------------+--------------+-------------+\r\n    | data_unlock   |       1       |      0       |      0      |\r\n    | data_import   |       1       |      1       |      0      |\r\n    | cache_cleanup |       1       |      0       |      0      |\r\n    +---------------+---------------+--------------+-------------+.\r\n\r\n    +-----------+------------------+-----------+-----------------+\r\n    | Worker IP | Registered Tasks | Client ID | File Descriptor |\r\n    +-----------+------------------+-----------+-----------------+\r\n    | 127.0.0.1 |   data_unlock    |     -     |        35       |\r\n    | 127.0.0.1 |   data_import    |     -     |        36       |\r\n    | 127.0.0.1 |  cache_cleanup   |     -     |        37       |\r\n    +-----------+------------------+-----------+-----------------+\r\n\r\nIf you have a lot of workers, you can filter output using command argument (case-sensitive):\r\n\r\n    $ python manage.py gearman_server_info cleanup\r\n    +---------------------+------------------------+--------------------+\r\n    | Gearman Server Host | Gearman Server Version | Ping Response Time |\r\n    +---------------------+------------------------+--------------------+\r\n    |    127.0.0.1:4730   |        OK 1.1.3        | 0.0006871223449707 |\r\n    +---------------------+------------------------+--------------------+.\r\n\r\n    +---------------+---------------+--------------+-------------+\r\n    |   Task Name   | Total Workers | Running Jobs | Queued Jobs |\r\n    +---------------+---------------+--------------+-------------+\r\n    | cache_cleanup |       1       |      0       |      0      |\r\n    +---------------+---------------+--------------+-------------+.\r\n\r\n    +-----------+------------------+-----------+-----------------+\r\n    | Worker IP | Registered Tasks | Client ID | File Descriptor |\r\n    +-----------+------------------+-----------+-----------------+\r\n    | 127.0.0.1 |  cache_cleanup   |     -     |        37       |\r\n    +-----------+------------------+-----------+-----------------+\r\n\r\nLicensing\r\n---------\r\nThis software is licensed under the [Mozilla Tri-License][MPL]:\r\n\r\n    ***** BEGIN LICENSE BLOCK *****\r\n    Version: MPL 1.1/GPL 2.0/LGPL 2.1\r\n\r\n    The contents of this file are subject to the Mozilla Public License Version\r\n    1.1 (the \"License\"); you may not use this file except in compliance with\r\n    the License. You may obtain a copy of the License at\r\n    http://www.mozilla.org/MPL/\r\n\r\n    Software distributed under the License is distributed on an \"AS IS\" basis,\r\n    WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\r\n    for the specific language governing rights and limitations under the\r\n    License.\r\n\r\n    The Original Code is django-gearman.\r\n\r\n    The Initial Developer of the Original Code is Mozilla.\r\n    Portions created by the Initial Developer are Copyright (C) 2010\r\n    the Initial Developer. All Rights Reserved.\r\n\r\n    Contributor(s):\r\n      Frederic Wenzel <fwenzel@mozilla.com>>\r\n      Jeff Balogh <me@jeffbalogh.org>\r\n      Jonas <jvp@jonasundderwolf.de>\r\n      Jozef Ševčík <sevcik@codescale.net>\r\n      Nicolas Rodriguez <nrodriguez@jbox-web.com>\r\n\r\n    Alternatively, the contents of this file may be used under the terms of\r\n    either the GNU General Public License Version 2 or later (the \"GPL\"), or\r\n    the GNU Lesser General Public License Version 2.1 or later (the \"LGPL\"),\r\n    in which case the provisions of the GPL or the LGPL are applicable instead\r\n    of those above. If you wish to allow use of your version of this file only\r\n    under the terms of either the GPL or the LGPL, and not to allow others to\r\n    use your version of this file under the terms of the MPL, indicate your\r\n    decision by deleting the provisions above and replace them with the notice\r\n    and other provisions required by the GPL or the LGPL. If you do not delete\r\n    the provisions above, a recipient may use your version of this file under\r\n    the terms of any one of the MPL, the GPL or the LGPL.\r\n\r\n    ***** END LICENSE BLOCK *****\r\n\r\n[MPL]: http://www.mozilla.org/MPL/\r\n","google":"UA-36504891-3","note":"Don't delete this file! It's used internally to help with page regeneration."}